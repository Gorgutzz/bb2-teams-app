{"version":3,"sources":["assets/bb2.jpg","components/SelectionButton.js","containers/NavButtonsContainer.js","components/LikeButton.js","components/TeamCard.js","components/PlayerCard.js","components/StarPlayerCard.js","actions/dataActions.js","containers/DataContainer.js","components/TeamDisplay.js","components/TeamFilter.js","components/PlayerDisplay.js","components/PlayerFilter.js","components/StarPlayerDisplay.js","components/StarPlayerFilter.js","components/Jumbotron.js","App.js","serviceWorker.js","store.js","reducers/TeamsReducer.js","reducers/PlayersReducer.js","reducers/StarPlayersReducer.js","index.js"],"names":["module","exports","SelectionButton","props","name","toLowerCase","to","activeStyle","disabled","id","Button","NavButtonsContainer","Container","Row","Col","Component","LikeButton","state","count","increment","newCount","setState","onClick","e","preventDefault","this","TeamCard","Card","view","info","style","width","Body","Title","Img","variant","height","src","image","PlayerCard","border","Text","player_type","cost","movement_allowance","strength","agility","armour_value","skills","StarPlayerCard","fetchTeams","console","log","dispatch","type","fetch","then","res","json","responseJSON","cards","DataContainer","sortTeams","sort_teams","sort","team1","team2","teams","displayCards","path","map","card","color","key","displayObject","players","star_players","title","CardColumns","connect","category","data","method","headers","Accept","body","JSON","stringify","object","views","TeamFilter","handleTeamFetch","params","PlayerFilter","handleTeamSelection","target","setTeam","fetchPlayers","currentTeam","dataset","team","response","fetchButtonTeams","Dropdown","Toggle","Menu","Item","data-team","teamId","StarPlayerFilter","fetchStarPlayers","Styles","styled","div","bb2","Jumbotron","fluid","className","Boolean","window","location","hostname","match","rootReducer","combineReducers","loading","action","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c5b211e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bb2.94f058f7.jpg\";","import React from 'react';\n\nimport Button from 'react-bootstrap/Button'\nimport { NavLink } from 'react-router-dom'\n\nconst SelectionButton = props => {\n\n        const name = props.name.toLowerCase();\n        return (\n            <NavLink to={`/${name}`} activeStyle={{ disabled: true }} id={name}><Button id=\"category-button\">{props.name}</Button></NavLink>\n        )\n    }\n\n\nexport default SelectionButton\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container'\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport SelectionButton from \"../components/SelectionButton\";\n\nclass NavButtonsContainer extends Component {\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col><SelectionButton name=\"Teams\" /></Col>\n                    <Col><SelectionButton name=\"Players\" /></Col>\n                    <Col><SelectionButton name=\"Star_Players\" /></Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default NavButtonsContainer\n","import React, { Component } from 'react';\n\nimport Button from 'react-bootstrap/Button'\n\nclass LikeButton extends Component {\n  state = {\n      count: 0\n    }\n\n  increment = () => {\n  //    console.log(\"test\")\n      let newCount = this.state.count + 1\n      this.setState({\n        count: newCount\n      })\n    }\n\n    render() {\n      return (\n        <div>\n          <Button\n            onClick={e => {\n              e.preventDefault();\n              this.increment();\n            }}\n          >\n            Likes: {this.state.count}{\" \"}\n          </Button>\n        </div>\n      );\n    }\n  }\n\nexport default LikeButton;\n","import React from 'react';\n\nimport Card from 'react-bootstrap/Card'\n\nimport LikeButton from \"../components/LikeButton\";\n\nconst TeamCard = props => {\n\n    const handleClick = (e) => {\n        props.view(props.info.id, \"teams\", 'DISPLAY_TEAMS');\n    };\n\n    return (\n        <Card onClick={handleClick} style={{ width: '18rem' }}>\n            <Card.Body>\n                <Card.Title>{props.info.name}<LikeButton /></Card.Title>\n            </Card.Body>\n            <Card.Img variant=\"bottom\" style={{ height: '12rem' }} src={props.info.image} />\n        </Card>\n    )\n}\n\nexport default TeamCard\n","// stateless component that handles the card layout of players\n\nimport React from 'react';\n\nimport Card from 'react-bootstrap/Card'\n\nconst PlayerCard = props => {\n\n    const handleClick = () => {\n        props.view(props.info.id, \"players\", 'DISPLAY_PLAYERS');\n    };\n\n    return (\n        <Card border=\"dark\" onClick={handleClick} style={{ width: '18rem' }}>\n            <Card.Body>\n                <Card.Title>{props.info.name}</Card.Title>\n                <Card.Text>Player Type: {props.info.player_type}</Card.Text>\n                <Card.Text>Cost: {props.info.cost}</Card.Text>\n                <Card.Text>Movement Allowance: {props.info.movement_allowance}</Card.Text>\n                <Card.Text>Strength: {props.info.strength}</Card.Text>\n                <Card.Text>Agility: {props.info.agility}</Card.Text>\n                <Card.Text>Armour Value: {props.info.armour_value}</Card.Text>\n                <Card.Text>Skills: {props.info.skills}</Card.Text>\n            </Card.Body>\n        </Card>\n    )\n};\n\nexport default PlayerCard\n","import React from 'react';\n\nimport Card from 'react-bootstrap/Card'\n\nconst StarPlayerCard = props => {\n\n    const handleClick = () => {\n        props.view(props.info.id, \"star_players\", 'DISPLAY_STAR_PLAYERS');\n    };\n\n    return (\n        <Card onClick={handleClick} style={{ width: '18rem' }}>\n            <Card.Body>\n                <Card.Title>{props.info.name}</Card.Title>\n                <Card.Text>Player Type: {props.info.player_type}</Card.Text>\n                <Card.Text>Cost: {props.info.cost}</Card.Text>\n                <Card.Text>Movement Allowance: {props.info.movement_allowance}</Card.Text>\n                <Card.Text>Strength: {props.info.strength}</Card.Text>\n                <Card.Text>Agility: {props.info.agility}</Card.Text>\n                <Card.Text>Armour Value: {props.info.armour_value}</Card.Text>\n                <Card.Text>Skills: {props.info.skills}</Card.Text>\n            </Card.Body>\n        </Card>\n    )\n};\n\nexport default StarPlayerCard\n","// Thunk allows action creators to return functions. The inner function can receive the store methods dispatch and getState as parameters\n\nexport const fetchTeams = () => {\n    console.log('c')\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_TEAMS'});\n        fetch(`/api/teams`)\n            .then(res => res.json())\n            .then(responseJSON => {\n              console.log('d')\n              dispatch({ type: 'ADD_TEAMS', cards: responseJSON})\n            })\n    }\n    console.log('e')\n};\n\n// export const sortTeams = () => {\n//     return (dispatch) => {\n//         dispatch({ type: 'LOADING_TEAMS'});\n//         fetch(`/api/teams`)\n//             .then(res => res.json())\n//             .then(responseJSON => { dispatch({ type: 'SORT_TEAMS', cards: responseJSON})\n//             })\n//     }\n// };\n\nexport const fetchPlayers = teamId => {\n    return dispatch => {\n        dispatch({ type: 'LOADING_PLAYERS' });\n        fetch(`/api/teams/${teamId}/players`) // interpolate id into path string\n          .then(res => res.json())\n          .then(responseJSON => { dispatch({ type: 'ADD_PLAYERS', cards: responseJSON});\n            })\n    }\n};\n\nexport const fetchStarPlayers = teamId => {\n    return dispatch => {\n        dispatch({ type: 'LOADING_STAR_PLAYERS' });\n        fetch(`/api/teams/${teamId}/star_players`)\n          .then(res => res.json())\n          .then(responseJSON => { dispatch({ type: 'ADD_STAR_PLAYERS', cards: responseJSON});\n            })\n    }\n};\n\nexport const displayObject = (id, category, type) => {\n    return dispatch => {\n        const data = { id };\n        fetch(`/api/${category}/show`, {\n            method: 'post',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(responseJSON => { dispatch({ type , object: responseJSON})\n            })\n    }\n};\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\n\nimport TeamCard from \"../components/TeamCard\";\nimport PlayerCard from \"../components/PlayerCard\";\nimport StarPlayerCard from \"../components/StarPlayerCard\";\nimport { displayObject } from \"../actions/dataActions\";\n\nimport CardColumns from \"react-bootstrap/CardColumns\";\n\nclass DataContainer extends Component {\n  // state = {\n  //   // Copy prop into state to render from state instead of props\n  //   teams: this.props.sort_teams\n  // };\n\n  sortTeams = () => {\n    this.props.sort_teams.cards.sort(function(team1, team2) {\n        if (team1.name < team2.name) {\n          return -1;\n        }\n        if (team1.name > team2.name) {\n          return 1;\n        }\n        return 0;\n      });\n      // updates the state with the sorting of the sort teams props\n      this.setState({\n        teams: this.props.sort_teams\n      });\n  };\n\n  displayCards = () => {\n      switch(this.props.path) {\n          case \"teams\":\n              return (this.props.teams.cards.map(card => (\n                  <NavLink style={{ color: \"black\" }} to={`/teams/${card.id}`} key={card.id}><TeamCard view={this.props.displayObject} info={card} /></NavLink>\n              )));\n\n          case \"players\":\n              return (this.props.players.cards.map(card => (\n                  <NavLink style={{ color: \"black\" }} to={`/players/${card.id}`} key={card.id}><PlayerCard view={this.props.displayObject} info={card} /></NavLink>\n              )));\n\n          case \"star_players\":\n              return (this.props.star_players.cards.map(card => (\n                  <NavLink style={{ color: \"black\" }} to={`/star_players/${card.id}`} key={card.id}><StarPlayerCard view={this.props.displayObject} info={card} /></NavLink>\n              )));\n\n          default:\n              return (<div>Empty</div>)\n      }\n  };\n\n  render() {\n      return (\n        <Fragment>\n          <div>\n            <button id=\"sort-button\" title=\"Sort Teams\" onClick={this.sortTeams}>Sort Teams</button>\n          </div>\n          <CardColumns>{this.displayCards()}</CardColumns>\n        </Fragment>\n      );\n    }\n  }\n\n  const mapStateToProps = state => {\n      return {\n          sort_teams: state.teams, // returns sort teams prop of the state to this component\n          teams: state.teams,\n          players: state.players,\n          star_players: state.star_players\n        }\n    };\n\n    const mapDispatchToProps = dispatch => {\n        return {\n            displayObject: (id, category, type) => dispatch(displayObject(id, category, type)),\n        }\n    };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataContainer)\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Card from 'react-bootstrap/Card'\n\nconst TeamDisplay = props => {\n    const info = props.info;\n\n    const displayObject = () => {\n        if (info) {\n            return (\n                <div>\n                <Card style={{ width: '50rem' }}>\n                  <Card.Body>\n                    <Card.Title>{info.name}</Card.Title>\n                  </Card.Body>\n                    <Card.Img variant=\"bottom\" src={info.image} />\n                    <Card.Text>Views: {info.views}</Card.Text>\n                </Card>\n                </div>\n            )\n        }\n\n        else {\n            return <div>Loading</div>\n        }\n    };\n\n    return (\n        <div>\n            {displayObject()}\n        </div>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        info: state.teams.object\n    }\n};\n\nexport default connect(mapStateToProps)(TeamDisplay);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTeams } from \".././actions/dataActions\";\n// import { sortTeams } from \".././actions/dataActions\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\n\nclass TeamFilter extends Component {\n  constructor(props) {\n      super(props); // used to access and call functions on an object's parent\n      this.state = { teams: [] };\n    }\n\n    handleTeamFetch = e => {\n        this.props.fetchTeams()\n    };\n\n    render() {\n      return (\n        <Container>\n            <Row>\n              <div>\n                  <button id=\"team-show-button\" title=\"Show All Teams\" onClick={this.handleTeamFetch}>Show All Teams</button>\n              </div>\n            </Row>\n        </Container>\n        )\n      }\n\n    }\n\n    const mapStateToProps = state => {\n        return {\n            teams: state.teams\n        }\n    };\n\n    const mapDispatchToProps = dispatch => {\n        return {\n            fetchTeams: params => dispatch(fetchTeams(params)),\n            // sortTeams: params => dispatch(sortTeams(params))\n        }\n    };\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamFilter)\n","// stateless component that handles the diplay of players when clicked\n\nimport React from 'react';\nimport { connect } from 'react-redux'\n\nimport Card from 'react-bootstrap/Card'\n\nconst PlayerDisplay = props => {\n    const info = props.info\n\n    const displayObject = () => {\n        if (info) {\n            return (\n                <div>\n                  <Card border=\"dark\" style={{ width: '18rem' }}>\n                    <Card.Body>\n                        <Card.Title>{info.name}</Card.Title>\n                        <Card.Text>Player Type: {info.player_type}</Card.Text>\n                        <Card.Text>Cost: {info.cost}</Card.Text>\n                        <Card.Text>Movement Allowance: {info.movement_allowance}</Card.Text>\n                        <Card.Text>Strength: {info.strength}</Card.Text>\n                        <Card.Text>Agility: {info.agility}</Card.Text>\n                        <Card.Text>Armour Value: {info.armour_value}</Card.Text>\n                        <Card.Text>Skills: {info.skills}</Card.Text>\n                        <Card.Text>Views: {info.views}</Card.Text>\n                    </Card.Body>\n                  </Card>\n                </div>\n            )\n        }\n\n        else {\n            return <div>Loading</div>\n        }\n    };\n\n    return (\n        <div>\n            {displayObject()}\n        </div>\n    )\n};\n\n// returns player object of the current state of component\nconst mapStateToProps = state => {\n    return {\n        info: state.players.object\n    }\n};\n\n// connects PlayerDisplay to the store, making any changes to the state avalible to this component.\nexport default connect(mapStateToProps)(PlayerDisplay);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPlayers, fetchTeams } from \".././actions/dataActions\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Container from \"react-bootstrap/Container\";\n\nclass PlayerFilter extends Component {\n  constructor() {\n      super();\n      this.state = { data: [], currentTeam: 'Select Team' };\n    }\n\n    async fetchButtonTeams() {\n      const response = await fetch(`/api/teams`);\n      const json = await response.json();\n      this.setState({ data: json });\n    }\n\n    //  method which calls the fetchButtonTeams's setState method to change the state and update data\n    componentDidMount(){\n      this.fetchButtonTeams()\n    }\n\n    handleTeamSelection = e => {\n        e.preventDefault();\n        const { target: { title }} = e;\n        this.props.setTeam(title);\n        this.props.fetchPlayers(title);\n    //    console.log(title, team, e.target.dataset.team)\n        this.setState({ currentTeam: e.target.dataset.team });\n    };\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Dropdown id=\"dropdown-player-button\" title={this.props.team}>\n                      <Dropdown.Toggle id=\"dropdown-button\">\n                        {this.state.currentTeam}\n                      </Dropdown.Toggle>\n                      <Dropdown.Menu>\n                          {this.state.data.map(team => (\n                            <div key={team}>\n                                <Dropdown.Item onClick={this.handleTeamSelection} title={team.id} data-team={team.name}>{team.name}</Dropdown.Item>\n                            </div>\n                        ))}\n                      </Dropdown.Menu>\n                    </Dropdown>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n// returns team's players of the current state of component\nconst mapStateToProps = state => {\n    return {\n        team: state.players.team\n    }\n};\n\n//  directs the dispatching of an action by pointing it to an action creator\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchPlayers: params => dispatch(fetchPlayers(params)),\n        fetchTeams: params => dispatch(fetchTeams(params)),\n        setTeam: team => dispatch({ type: \"SET_TEAM\", team })\n    }\n};\n\n// connects PlayerFilter to the store, and dispatch an action to the store to update the state\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerFilter)\n","import React from 'react';\nimport { connect } from 'react-redux'\n\nimport Card from 'react-bootstrap/Card'\n\nconst StarPlayerDisplay = props => {\n    const info = props.info\n\n    const displayObject = () => {\n        if (info) {\n            return (\n                <div>\n                  <Card border=\"dark\" style={{ width: '18rem' }}>\n                    <Card.Body>\n                        <Card.Title>{info.name}</Card.Title>\n                        <Card.Text>Player Type: {info.player_type}</Card.Text>\n                        <Card.Text>Cost: {info.cost}</Card.Text>\n                        <Card.Text>Movement Allowance: {info.movement_allowance}</Card.Text>\n                        <Card.Text>Strength: {info.strength}</Card.Text>\n                        <Card.Text>Agility: {info.agility}</Card.Text>\n                        <Card.Text>Armour Value: {info.armour_value}</Card.Text>\n                        <Card.Text>Skills: {info.skills}</Card.Text>\n                        <Card.Text>Views: {info.views}</Card.Text>\n                    </Card.Body>\n                  </Card>\n                </div>\n            )\n        }\n\n        else {\n            return <div>Loading</div>\n        }\n    };\n\n    return (\n        <div>\n            {displayObject()}\n        </div>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        info: state.star_players.object\n    }\n};\n\nexport default connect(mapStateToProps)(StarPlayerDisplay);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStarPlayers, fetchTeams } from \".././actions/dataActions\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Container from \"react-bootstrap/Container\";\n\nclass StarPlayerFilter extends Component {\n  constructor() {\n      super();\n      this.state = { data: [], currentTeam: 'Select Team' };\n    }\n\n    async fetchButtonTeams() {\n      const response = await fetch(`/api/teams`);\n      const json = await response.json();\n      this.setState({ data: json });\n    }\n\n    componentDidMount(){\n      this.fetchButtonTeams()\n    }\n\n    handleTeamSelection = e => {\n        e.preventDefault();\n        const { target: { title }} = e;\n        this.props.setTeam(title);\n        this.props.fetchStarPlayers(title);\n        this.setState({ currentTeam: e.target.dataset.team });\n    };\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Dropdown id=\"dropdown-star-player-button\" title={this.props.team}>\n                      <Dropdown.Toggle id=\"dropdown-button\">\n                        {this.state.currentTeam}\n                      </Dropdown.Toggle>\n                      <Dropdown.Menu>\n                          {this.state.data.map(team => (\n                            <div key={team}>\n                                <Dropdown.Item onClick={this.handleTeamSelection} title={team.id} data-team={team.name}>{team.name}</Dropdown.Item>\n                            </div>\n                        ))}\n                      </Dropdown.Menu>\n                    </Dropdown>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        team: state.star_players.team\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchStarPlayers: params => dispatch(fetchStarPlayers(params)),\n        fetchTeams: params => dispatch(fetchTeams(params)),\n        setTeam: team => dispatch({ type: \"SET_TEAM\", team })\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StarPlayerFilter)\n","import React from 'react';\nimport {Jumbotron as Jumbo} from 'react-bootstrap'\nimport styled from 'styled-components'\nimport bb2 from '../assets/bb2.jpg'\n\nconst Styles = styled.div`\n  .jumbo {\n    background: url(${bb2}) no-repeat;\n    background-size: cover;\n    height: 250px;\n    position: relative;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-shadow: 0px 0px 10px black;\n  }\n\n  .jumbo h2 {\n    color: white;\n    margin-top:-40px;\n    margin-left:30px;\n    text-shadow: 2px 2px 5px black;\n  }\n\n  .overlay{\n    opacity: 0.2;\n    position: absolute;\n    margin: 0 auto;\n  }\n`;\n\nconst Jumbotron = () => {\n  return(\n    <Styles>\n      <Jumbo fluid className=\"jumbo\">\n          <h2>Teams and Players of Blood Bowl</h2>\n      </Jumbo>\n    </Styles>\n  )\n}\n\nexport default Jumbotron\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\n\nimport NavButtonsContainer  from './containers/NavButtonsContainer';\nimport DataContainer from \"./containers/DataContainer\";\n\nimport TeamDisplay from \"./components/TeamDisplay\";\nimport TeamFilter from \"./components/TeamFilter\";\n\nimport PlayerDisplay from \"./components/PlayerDisplay\";\nimport PlayerFilter from \"./components/PlayerFilter\";\n\nimport StarPlayerDisplay from \"./components/StarPlayerDisplay\";\nimport StarPlayerFilter from \"./components/StarPlayerFilter\";\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// BrowserRouter is the router implementation for HTML5 browsers (vs Native).\n// Route is the conditionally shown component based on matching a path to a URL.\n// Switch returns only the first matching route rather than all matching routes.\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\n\nimport Jumbotron from './components/Jumbotron'\n\nconst App = props => {\n  return (\n    <Container>\n        <Router>\n            <Switch>\n                <Route path=\"/teams/:id\">\n                    <Jumbotron/>\n                    <TeamDisplay info={props.info} />\n                </Route>\n\n                <Route path=\"/players/:id\">\n                    <Jumbotron/>\n                    <PlayerDisplay info={props.info} />\n                </Route>\n\n                <Route path=\"/star_players/:id\">\n                    <Jumbotron/>\n                    <StarPlayerDisplay info={props.info} />\n                </Route>\n\n                <Route path=\"/teams\">\n                    <Jumbotron/>\n                    <Row>\n                        <Col><TeamFilter path=\"teams\" /></Col>\n                    </Row>\n                    <Row>\n                        <NavButtonsContainer />\n                    </Row>\n                    <Row>\n                        <DataContainer path=\"teams\" />\n                    </Row>\n                </Route>\n\n                <Route path=\"/players\">\n                    <Jumbotron/>\n                    <Row>\n                        <Col><PlayerFilter path=\"players\" /></Col>\n                    </Row>\n                    <Row>\n                        <NavButtonsContainer />\n                    </Row>\n                    <Row>\n                        <DataContainer path=\"players\" />\n                    </Row>\n                </Route>\n\n                <Route path=\"/star_players\">\n                    <Jumbotron/>\n                    <Row>\n                        <Col><StarPlayerFilter path=\"star_players\" /></Col>\n                    </Row>\n                    <Row>\n                        <NavButtonsContainer />\n                    </Row>\n                    <Row>\n                        <DataContainer path=\"star_players\" />\n                    </Row>\n                </Route>\n\n                <Route path=\"/\">\n                       <Jumbotron/>\n                       <NavButtonsContainer />\n                </Route>\n            </Switch>\n        </Router>\n    </Container>\n  );\n\n};\n\nconst mapStateToProps = state => {\n    return {\n        info: state.object\n    }\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Store holds application state, allows access to state via getState() and state to be updated via dispatch(action).\n\nimport {applyMiddleware, createStore, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport TeamsReducer from './reducers/TeamsReducer';\nimport PlayersReducer from './reducers/PlayersReducer';\nimport StarPlayersReducer from './reducers/StarPlayersReducer';\n\nconst rootReducer = combineReducers({ teams: TeamsReducer, players: PlayersReducer, star_players: StarPlayersReducer });\nconst store = createStore(rootReducer, compose(\n\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store\n","// Reducers take in the argument of the state set to the default initial state and the action helps the reducer determine what needs to be done with the state.\nexport default function TeamsReducer(state = {\n    cards: [],\n    loading: false\n}, action) {\n    switch (action.type) {\n        case 'LOADING_TEAMS':\n            return {\n                ...state,\n            };\n\n        case 'ADD_TEAMS':\n            return {\n                ...state,\n                cards: action.cards,\n            };\n\n        case 'DISPLAY_TEAMS':\n            return {\n                ...state,\n                object: action.object,\n            };\n\n        // case 'SORT_TEAMS':\n        //     return {\n        //         ...state,\n        //         cards: action.cards.slice().sort(function(team1, team2) {\n        //           if (team1.name < team2.name) return -1;\n        //           if (team1.name > team2.name) return 1;\n        //           return 0;\n        //     })};\n\n        default:\n            return state\n    }\n}\n","export default function PlayersReducer(state = {\n    cards: [],\n    loading: false,\n    team: \"Select Team\"\n}, action) {\n    switch (action.type) {\n        case 'LOADING_PLAYERS':\n            return {\n                ...state,\n            };\n\n        case 'ADD_PLAYERS':\n            return {\n                ...state,\n                cards: action.cards,\n            };\n\n        case 'DISPLAY_PLAYERS':\n            return {\n                ...state,\n                object: action.object,\n            };\n\n        case 'SET_TEAM':\n            return {\n                ...state,\n                team: action.team\n            };\n\n        default:\n            return state\n    }\n}\n","export default function StarPlayersReducer(state = {\n    cards: [],\n    loading: false,\n    team: \"Select Team\"\n}, action) {\n    switch (action.type) {\n        case 'LOADING_STAR_PLAYERS':\n            return {\n                ...state,\n            };\n\n        case 'ADD_STAR_PLAYERS':\n            return {\n                ...state,\n                cards: action.cards,\n            };\n\n        case 'DISPLAY_STAR_PLAYERS':\n            return {\n                ...state,\n                object: action.object,\n            };\n\n        case 'SET_TEAM':\n            return {\n                ...state,\n                team: action.team\n            };\n\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store.js'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}