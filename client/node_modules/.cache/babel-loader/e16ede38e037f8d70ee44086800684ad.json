{"ast":null,"code":"// Thunk allows action creators to return functions. The inner function can receive the store methods dispatch and getState as parameters\nexport const fetchTeams = () => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_TEAMS'\n    });\n    fetch(`/api/teams`).then(res => res.json()).then(responseJSON => {\n      console.log('d');\n      dispatch({\n        type: 'ADD_TEAMS',\n        cards: responseJSON\n      });\n    });\n  };\n};\nexport const fetchPlayers = teamId => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_PLAYERS'\n    });\n    fetch(`/api/teams/${teamId}/players`) // interpolate id into path string\n    .then(res => res.json()).then(responseJSON => {\n      dispatch({\n        type: 'ADD_PLAYERS',\n        cards: responseJSON\n      });\n    });\n  };\n};\nexport const fetchStarPlayers = teamId => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_STAR_PLAYERS'\n    });\n    fetch(`/api/teams/${teamId}/star_players`).then(res => res.json()).then(responseJSON => {\n      dispatch({\n        type: 'ADD_STAR_PLAYERS',\n        cards: responseJSON\n      });\n    });\n  };\n};\nexport const displayObject = (id, category, type) => {\n  return dispatch => {\n    const data = {\n      id\n    };\n    fetch(`/api/${category}/show`, {\n      method: 'post',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.json()).then(responseJSON => {\n      dispatch({\n        type,\n        object: responseJSON\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/leo/Documents/Learn.co/bb2-teams-app/client/src/actions/dataActions.js"],"names":["fetchTeams","dispatch","type","fetch","then","res","json","responseJSON","console","log","cards","fetchPlayers","teamId","fetchStarPlayers","displayObject","id","category","data","method","headers","Accept","body","JSON","stringify","object"],"mappings":"AAAA;AAEA,OAAO,MAAMA,UAAU,GAAG,MAAM;AAC5B,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,YAAF,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,YAAY,IAAI;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACtBR,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,WAAR;AAAqBQ,QAAAA,KAAK,EAAEH;AAA5B,OAAD,CAAR;AACD,KAJL;AAKH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMI,YAAY,GAAGC,MAAM,IAAI;AAClC,SAAOX,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,cAAaS,MAAO,UAAtB,CAAL,CAAsC;AAAtC,KACGR,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,YAAY,IAAI;AAAEN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,aAAR;AAAuBQ,QAAAA,KAAK,EAAEH;AAA9B,OAAD,CAAR;AACrB,KAHL;AAIH,GAND;AAOH,CARM;AAUP,OAAO,MAAMM,gBAAgB,GAAGD,MAAM,IAAI;AACtC,SAAOX,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,cAAaS,MAAO,eAAtB,CAAL,CACGR,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,YAAY,IAAI;AAAEN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,kBAAR;AAA4BQ,QAAAA,KAAK,EAAEH;AAAnC,OAAD,CAAR;AACrB,KAHL;AAIH,GAND;AAOH,CARM;AAUP,OAAO,MAAMO,aAAa,GAAG,CAACC,EAAD,EAAKC,QAAL,EAAed,IAAf,KAAwB;AACjD,SAAOD,QAAQ,IAAI;AACf,UAAMgB,IAAI,GAAG;AAAEF,MAAAA;AAAF,KAAb;AACAZ,IAAAA,KAAK,CAAE,QAAOa,QAAS,OAAlB,EAA0B;AAC3BE,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH,OAFkB;AAM3BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANqB,KAA1B,CAAL,CAQKb,IARL,CAQUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARjB,EASKF,IATL,CASUG,YAAY,IAAI;AAAEN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAF;AAASsB,QAAAA,MAAM,EAAEjB;AAAjB,OAAD,CAAR;AACvB,KAVL;AAWH,GAbD;AAcH,CAfM","sourcesContent":["// Thunk allows action creators to return functions. The inner function can receive the store methods dispatch and getState as parameters\n\nexport const fetchTeams = () => {\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_TEAMS'});\n        fetch(`/api/teams`)\n            .then(res => res.json())\n            .then(responseJSON => { console.log('d')\n              dispatch({ type: 'ADD_TEAMS', cards: responseJSON})\n            })\n    }\n};\n\nexport const fetchPlayers = teamId => {\n    return dispatch => {\n        dispatch({ type: 'LOADING_PLAYERS' });\n        fetch(`/api/teams/${teamId}/players`) // interpolate id into path string\n          .then(res => res.json())\n          .then(responseJSON => { dispatch({ type: 'ADD_PLAYERS', cards: responseJSON});\n            })\n    }\n};\n\nexport const fetchStarPlayers = teamId => {\n    return dispatch => {\n        dispatch({ type: 'LOADING_STAR_PLAYERS' });\n        fetch(`/api/teams/${teamId}/star_players`)\n          .then(res => res.json())\n          .then(responseJSON => { dispatch({ type: 'ADD_STAR_PLAYERS', cards: responseJSON});\n            })\n    }\n};\n\nexport const displayObject = (id, category, type) => {\n    return dispatch => {\n        const data = { id };\n        fetch(`/api/${category}/show`, {\n            method: 'post',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(responseJSON => { dispatch({ type , object: responseJSON})\n            })\n    }\n};\n"]},"metadata":{},"sourceType":"module"}