{"ast":null,"code":"var _jsxFileName = \"/home/leo/Documents/Learn.co/bb2-teams-app/client/src/containers/DataContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport TeamCard from '../components/TeamCard';\nimport PlayerCard from '../components/PlayerCard';\nimport StarPlayerCard from '../components/StarPlayerCard';\nimport { displayObject } from '../actions/dataActions';\nimport CardColumns from 'react-bootstrap/CardColumns';\n\nclass DataContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      teamCards: [...this.props.teams.cards]\n    };\n\n    this.sortCards = () => {\n      // console.log(123)\n      var sortedArray = this.props.teams.cards.slice();\n      sortedArray.sort(function (team1, team2) {\n        if (team1.name < team2.name) {\n          return -1;\n        }\n\n        if (team1.name > team2.name) {\n          return 1;\n        }\n\n        return 0;\n      });\n      console.log('sorted');\n      console.log(sortedArray);\n      return this.props.teams.cards.map(card => React.createElement(NavLink, {\n        style: {\n          color: \"black\"\n        },\n        to: `/teams/${card.id}`,\n        key: card.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(TeamCard, {\n        view: this.props.displayObject,\n        info: card,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      })));\n    };\n\n    this.displayCards = () => {\n      console.log('not sorted');\n      console.log(this.props.teams.cards); // console.log(this.props.teams.cards, typeof this.props.teams.cards)\n\n      switch (this.props.path) {\n        case \"teams\":\n          return this.props.teams.cards.map(card => React.createElement(NavLink, {\n            style: {\n              color: \"black\"\n            },\n            to: `/teams/${card.id}`,\n            key: card.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, React.createElement(TeamCard, {\n            view: this.props.displayObject,\n            info: card,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          })));\n\n        case \"players\":\n          return this.props.players.cards.map(card => React.createElement(NavLink, {\n            style: {\n              color: \"black\"\n            },\n            to: `/players/${card.id}`,\n            key: card.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, React.createElement(PlayerCard, {\n            view: this.props.displayObject,\n            info: card,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          })));\n\n        case \"star_players\":\n          return this.props.star_players.cards.map(card => React.createElement(NavLink, {\n            style: {\n              color: \"black\"\n            },\n            to: `/star_players/${card.id}`,\n            key: card.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, React.createElement(StarPlayerCard, {\n            view: this.props.displayObject,\n            info: card,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          })));\n\n        default:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, \"Empty\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(CardColumns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"sort-button\",\n      title: \"Sort Teams\",\n      onClick: this.sortTeamCards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Sort Teams\"), this.displayCards(), this.sortCards());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    // teamsDefaultOrder: [...state.teams].sort(function(team1, team2) {\n    //   if (team1.name < team2.name) {\n    //     return -1;\n    //   }\n    //   if (team1.name > team2.name) {\n    //     return 1;\n    //   }\n    //   return 0;\n    // }),\n    // sort_teams: state.teams.cards.sort(function(team1, team2) {\n    //    if (team1.name < team2.name) {\n    //      return -1;\n    //    }\n    //    if (team1.name > team2.name) {\n    //      return 1;\n    //    }\n    //  })\n    teamCards: state.teams,\n    teams: state.teams,\n    players: state.players,\n    star_players: state.star_players\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    displayObject: (id, category, type) => dispatch(displayObject(id, category, type))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataContainer);","map":{"version":3,"sources":["/home/leo/Documents/Learn.co/bb2-teams-app/client/src/containers/DataContainer.js"],"names":["React","Component","connect","NavLink","TeamCard","PlayerCard","StarPlayerCard","displayObject","CardColumns","DataContainer","state","teamCards","props","teams","cards","sortCards","sortedArray","slice","sort","team1","team2","name","console","log","map","card","color","id","displayCards","path","players","star_players","render","sortTeamCards","mapStateToProps","mapDispatchToProps","dispatch","category","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport TeamCard from '../components/TeamCard'\nimport PlayerCard from '../components/PlayerCard';\nimport StarPlayerCard from '../components/StarPlayerCard';\nimport { displayObject } from '../actions/dataActions'\n\nimport CardColumns from 'react-bootstrap/CardColumns'\n\nclass DataContainer extends Component {\n  state = {\n    teamCards: [...this.props.teams.cards]\n  };\n\n\n  sortCards = () => {\n        // console.log(123)\n        var sortedArray = this.props.teams.cards.slice();\n        sortedArray.sort(function(team1, team2) {\n            if (team1.name < team2.name) {\n              return -1;\n            }\n            if (team1.name > team2.name) {\n              return 1;\n            }\n            return 0;\n          });\n          console.log('sorted')\n          console.log(sortedArray)\n\n\n        return (this.props.teams.cards.map(card => (\n            <NavLink style={{ color: \"black\" }} to={`/teams/${card.id}`} key={card.id}><TeamCard view={this.props.displayObject} info={card} /></NavLink>\n        )));\n    };\n\n  displayCards = () => {\n    console.log('not sorted')\n    console.log(this.props.teams.cards)\n      // console.log(this.props.teams.cards, typeof this.props.teams.cards)\n      switch(this.props.path) {\n          case \"teams\":\n              return (this.props.teams.cards.map(card => (\n                  <NavLink style={{ color: \"black\" }} to={`/teams/${card.id}`} key={card.id}><TeamCard view={this.props.displayObject} info={card} /></NavLink>\n              )));\n\n          case \"players\":\n              return (this.props.players.cards.map(card => (\n                  <NavLink style={{ color: \"black\" }} to={`/players/${card.id}`} key={card.id}><PlayerCard view={this.props.displayObject} info={card} /></NavLink>\n              )));\n\n          case \"star_players\":\n              return (this.props.star_players.cards.map(card => (\n                  <NavLink style={{ color: \"black\" }} to={`/star_players/${card.id}`} key={card.id}><StarPlayerCard view={this.props.displayObject} info={card} /></NavLink>\n              )));\n\n          default:\n              return (<div>Empty</div>)\n      }\n  };\n\n\n  render() {\n\n      return (\n          <CardColumns>\n              <button id=\"sort-button\" title=\"Sort Teams\" onClick={this.sortTeamCards}>Sort Teams</button>\n              {this.displayCards()}\n              {this.sortCards()}\n          </CardColumns>\n        )\n     }\n  }\n\n  const mapStateToProps = state => {\n      return {\n          // teamsDefaultOrder: [...state.teams].sort(function(team1, team2) {\n          //   if (team1.name < team2.name) {\n          //     return -1;\n          //   }\n          //   if (team1.name > team2.name) {\n          //     return 1;\n          //   }\n          //   return 0;\n          // }),\n\n          // sort_teams: state.teams.cards.sort(function(team1, team2) {\n          //    if (team1.name < team2.name) {\n          //      return -1;\n          //    }\n          //    if (team1.name > team2.name) {\n          //      return 1;\n          //    }\n          //  })\n\n          teamCards: state.teams,\n          teams: state.teams,\n          players: state.players,\n          star_players: state.star_players,\n      }\n  };\n\n  const mapDispatchToProps = dispatch => {\n      return {\n          displayObject: (id, category, type) => dispatch(displayObject(id, category, type)),\n      }\n  };\n\n  export default connect(mapStateToProps, mapDispatchToProps)(DataContainer)\n"]},"metadata":{},"sourceType":"module"}