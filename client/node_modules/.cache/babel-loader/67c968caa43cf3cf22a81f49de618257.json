{"ast":null,"code":"// Thunk allows action creators to return functions. The inner function can receive the store methods dispatch and getState as parameters\nexport var fetchTeams=function fetchTeams(){console.log('c');return function(dispatch){dispatch({type:'LOADING_TEAMS'});fetch(\"/api/teams\").then(function(res){return res.json();}).then(function(responseJSON){console.log('d');dispatch({type:'ADD_TEAMS',cards:responseJSON});});};console.log('e');};// export const sortTeams = () => {\n//     return (dispatch) => {\n//         dispatch({ type: 'LOADING_TEAMS'});\n//         fetch(`/api/teams`)\n//             .then(res => res.json())\n//             .then(responseJSON => { dispatch({ type: 'SORT_TEAMS', cards: responseJSON})\n//             })\n//     }\n// };\nexport var fetchPlayers=function fetchPlayers(teamId){return function(dispatch){dispatch({type:'LOADING_PLAYERS'});fetch(\"/api/teams/\".concat(teamId,\"/players\"))// interpolate id into path string\n.then(function(res){return res.json();}).then(function(responseJSON){dispatch({type:'ADD_PLAYERS',cards:responseJSON});});};};export var fetchStarPlayers=function fetchStarPlayers(teamId){return function(dispatch){dispatch({type:'LOADING_STAR_PLAYERS'});fetch(\"/api/teams/\".concat(teamId,\"/star_players\")).then(function(res){return res.json();}).then(function(responseJSON){dispatch({type:'ADD_STAR_PLAYERS',cards:responseJSON});});};};export var displayObject=function displayObject(id,category,type){return function(dispatch){var data={id:id};fetch(\"/api/\".concat(category,\"/show\"),{method:'post',headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify(data)}).then(function(res){return res.json();}).then(function(responseJSON){dispatch({type:type,object:responseJSON});});};};","map":{"version":3,"sources":["/home/leo/Documents/Learn.co/bb2-teams-app/client/src/actions/dataActions.js"],"names":["fetchTeams","console","log","dispatch","type","fetch","then","res","json","responseJSON","cards","fetchPlayers","teamId","fetchStarPlayers","displayObject","id","category","data","method","headers","Accept","body","JSON","stringify","object"],"mappings":"AAAA;AAEA,MAAO,IAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAC5BC,OAAO,CAACC,GAAR,CAAY,GAAZ,EACA,MAAO,UAACC,QAAD,CAAc,CACjBA,QAAQ,CAAC,CAAEC,IAAI,CAAE,eAAR,CAAD,CAAR,CACAC,KAAK,cAAL,CACKC,IADL,CACU,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADb,EAEKF,IAFL,CAEU,SAAAG,YAAY,CAAI,CACpBR,OAAO,CAACC,GAAR,CAAY,GAAZ,EACAC,QAAQ,CAAC,CAAEC,IAAI,CAAE,WAAR,CAAqBM,KAAK,CAAED,YAA5B,CAAD,CAAR,CACD,CALL,EAMH,CARD,CASAR,OAAO,CAACC,GAAR,CAAY,GAAZ,EACH,CAZM,CAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,IAAMS,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,MAAM,CAAI,CAClC,MAAO,UAAAT,QAAQ,CAAI,CACfA,QAAQ,CAAC,CAAEC,IAAI,CAAE,iBAAR,CAAD,CAAR,CACAC,KAAK,sBAAeO,MAAf,aAAiC;AAAtC,CACGN,IADH,CACQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADX,EAEGF,IAFH,CAEQ,SAAAG,YAAY,CAAI,CAAEN,QAAQ,CAAC,CAAEC,IAAI,CAAE,aAAR,CAAuBM,KAAK,CAAED,YAA9B,CAAD,CAAR,CACrB,CAHL,EAIH,CAND,CAOH,CARM,CAUP,MAAO,IAAMI,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAD,MAAM,CAAI,CACtC,MAAO,UAAAT,QAAQ,CAAI,CACfA,QAAQ,CAAC,CAAEC,IAAI,CAAE,sBAAR,CAAD,CAAR,CACAC,KAAK,sBAAeO,MAAf,kBAAL,CACGN,IADH,CACQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADX,EAEGF,IAFH,CAEQ,SAAAG,YAAY,CAAI,CAAEN,QAAQ,CAAC,CAAEC,IAAI,CAAE,kBAAR,CAA4BM,KAAK,CAAED,YAAnC,CAAD,CAAR,CACrB,CAHL,EAIH,CAND,CAOH,CARM,CAUP,MAAO,IAAMK,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,EAAD,CAAKC,QAAL,CAAeZ,IAAf,CAAwB,CACjD,MAAO,UAAAD,QAAQ,CAAI,CACf,GAAMc,CAAAA,IAAI,CAAG,CAAEF,EAAE,CAAFA,EAAF,CAAb,CACAV,KAAK,gBAASW,QAAT,UAA0B,CAC3BE,MAAM,CAAE,MADmB,CAE3BC,OAAO,CAAE,CACL,eAAgB,kBADX,CAELC,MAAM,CAAE,kBAFH,CAFkB,CAM3BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf,CANqB,CAA1B,CAAL,CAQKX,IARL,CAQU,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EARb,EASKF,IATL,CASU,SAAAG,YAAY,CAAI,CAAEN,QAAQ,CAAC,CAAEC,IAAI,CAAJA,IAAF,CAASoB,MAAM,CAAEf,YAAjB,CAAD,CAAR,CACvB,CAVL,EAWH,CAbD,CAcH,CAfM","sourcesContent":["// Thunk allows action creators to return functions. The inner function can receive the store methods dispatch and getState as parameters\n\nexport const fetchTeams = () => {\n    console.log('c')\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_TEAMS'});\n        fetch(`/api/teams`)\n            .then(res => res.json())\n            .then(responseJSON => {\n              console.log('d')\n              dispatch({ type: 'ADD_TEAMS', cards: responseJSON})\n            })\n    }\n    console.log('e')\n};\n\n// export const sortTeams = () => {\n//     return (dispatch) => {\n//         dispatch({ type: 'LOADING_TEAMS'});\n//         fetch(`/api/teams`)\n//             .then(res => res.json())\n//             .then(responseJSON => { dispatch({ type: 'SORT_TEAMS', cards: responseJSON})\n//             })\n//     }\n// };\n\nexport const fetchPlayers = teamId => {\n    return dispatch => {\n        dispatch({ type: 'LOADING_PLAYERS' });\n        fetch(`/api/teams/${teamId}/players`) // interpolate id into path string\n          .then(res => res.json())\n          .then(responseJSON => { dispatch({ type: 'ADD_PLAYERS', cards: responseJSON});\n            })\n    }\n};\n\nexport const fetchStarPlayers = teamId => {\n    return dispatch => {\n        dispatch({ type: 'LOADING_STAR_PLAYERS' });\n        fetch(`/api/teams/${teamId}/star_players`)\n          .then(res => res.json())\n          .then(responseJSON => { dispatch({ type: 'ADD_STAR_PLAYERS', cards: responseJSON});\n            })\n    }\n};\n\nexport const displayObject = (id, category, type) => {\n    return dispatch => {\n        const data = { id };\n        fetch(`/api/${category}/show`, {\n            method: 'post',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(responseJSON => { dispatch({ type , object: responseJSON})\n            })\n    }\n};\n"]},"metadata":{},"sourceType":"module"}